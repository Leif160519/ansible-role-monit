---
- name: pkg - Install package (>= 20.04)
  apt:
    name: monit
    state: present
  when: ansible_facts['distribution_version'] is version('20.04', '>=')

- name: pkg - Install package (>= 14.04)
  apt:
    deb: "http://nexus.genscript.com/repository/it/ppa.genscript.com/monit/5.26.0-1~ppa-genscript-ubuntu2/monit_5.26.0-1~ppa-genscript-ubuntu2_amd64.deb"
    state: present
  when: ( ansible_facts['distribution_version'] is version('14.04', '>=') and
          ansible_facts['distribution_version'] is version('20.04', '<') )

- name: pkg - Install package (< 14.04)
  block:
    - package:
        name: monit
        state: absent
    - file:
        path: "/opt/monit/"
        state: directory
    - unarchive:
        src: "http://nexus.genscript.com/repository/it/ppa.genscript.com/monit/monit-5.26.0-linux-x64.tar.gz"
        dest: "/opt/monit/"
        remote_src: yes
    - get_url:
        url: "http://nexus.genscript.com/repository/it/ppa.genscript.com/monit/monit_build_in_1204"
        dest: "/opt/monit/monit-5.26.0/bin/monit"
        mode: 0755
    - file:
        src: "/opt/monit/monit-5.26.0/bin/monit"
        dest: "/usr/local/bin/monit"
        state: link
    - file:
        src: "/etc/monit/monitrc"
        dest: "/usr/local/etc/monitrc"
        state: link
    - blockinfile:
        path: "/etc/init.d/monit"
        mode: "0755"
        create: yes
        block: |
          #!/bin/sh
          
          ### BEGIN INIT INFO
          # Provides:          monit
          # Required-Start:    $remote_fs
          # Required-Stop:     $remote_fs
          # Should-Start:      $all
          # Should-Stop:       $all
          # Default-Start:     2 3 4 5
          # Default-Stop:      0 1 6
          # Short-Description: service and resource monitoring daemon
          # Description:       monit is a utility for managing and monitoring
          #                    processes, programs, files, directories and filesystems
          #                    on a Unix system. Monit conducts automatic maintenance
          #                    and repair and can execute meaningful causal actions
          #                    in error situations.
          ### END INIT INFO
          
          set -e
          
          . /lib/lsb/init-functions
          
          DAEMON=/usr/local/bin/monit
          CONFIG=/etc/monit/monitrc
          NAME=monit
          DESC="daemon monitor"
          MONIT_OPTS=
          PID="/run/$NAME.pid"
          
          # Check if DAEMON binary exist
          [ -f $DAEMON ] || exit 0
          
          [ -f "/etc/default/$NAME" ] && . /etc/default/$NAME
          
          MONIT_OPTS="-c $CONFIG $MONIT_OPTS"
          
          monit_not_configured () {
            if [ "$1" != "stop" ]
            then
              printf "\tplease configure $NAME and then edit /etc/default/$NAME\n"
              printf "\tand set the \"START\" variable to \"yes\" in order to allow\n"
              printf "\t$NAME to start\n"
            fi
            exit 0
          }
          
          monit_checks () {
            # Check if START variable is set to "yes", if not we exit.
            if [ "$START" != "yes" ]
            then
              monit_not_configured $1
            fi
          }
          
          case "$1" in
            start)
              log_daemon_msg "Starting $DESC" "$NAME"
              monit_checks $1
              if start-stop-daemon --start --quiet --oknodo --pidfile $PID --exec $DAEMON -- $MONIT_OPTS 1>/dev/null
              then
                log_end_msg 0
              else
                log_end_msg 1
              fi
              ;;
            stop)
              log_daemon_msg "Stopping $DESC" "$NAME"
              if start-stop-daemon --retry TERM/5/KILL/5 --oknodo --stop --quiet --pidfile $PID 1>/dev/null
              then
                log_end_msg 0
              else
                log_end_msg 1
              fi
              ;;
            reload)
              log_daemon_msg "Reloading $DESC configuration" "$NAME"
              if start-stop-daemon --stop --signal HUP --quiet --oknodo --pidfile $PID --exec $DAEMON -- $MONIT_OPTS 1>/dev/null
              then
                log_end_msg 0
              else
                log_end_msg 1
          	fi
              ;;
            restart|force-reload)
              log_daemon_msg "Restarting $DESC" "$NAME"
              start-stop-daemon --retry TERM/5/KILL/5 --oknodo --stop --quiet --pidfile $PID 1>/dev/null
              if start-stop-daemon --start --quiet --oknodo --pidfile $PID --exec $DAEMON -- $MONIT_OPTS 1>/dev/null
              then
                log_end_msg 0
              else
                log_end_msg 1
              fi
              ;;
            syntax)
              $DAEMON $MONIT_OPTS -t
              ;;
            status)
              status_of_proc -p $PID $DAEMON $NAME
              ;;
            *)
              log_action_msg "Usage: /etc/init.d/$NAME {start|stop|reload|restart|force-reload|syntax|status}"
              ;;
          esac
          
          exit 0
    - blockinfile:
        path: "/etc/default/monit"
        mode: "0644"
        create: yes
        block: |
          # /etc/default/monit
          
          # Defaults for monit initscript.  This file is sourced by
          # /bin/sh from /etc/init.d/monit.
          
          # Set START to yes to start the monit
          START=yes
          
          # Options to pass to monit
          #MONIT_OPTS=
    - service:
        name: monit
        enabled: yes
  when: ansible_facts['distribution_version'] is version('14.04', '<')
